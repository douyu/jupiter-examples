package service

import (
	"context"
	"fmt"
	"sync"

	"github.com/bwmarrin/snowflake"
	uuidv1 "github.com/douyu/jupiter-examples/uuid/gen/api/go/uuid/v1"
	redisCli "github.com/douyu/jupiter-examples/uuid/internal/pkg/redis"
	"github.com/google/uuid"
	"github.com/google/wire"
)

var ProviderSet = wire.NewSet(
	NewUuidService,
	wire.Struct(new(Options), "*"),
	redisCli.ProviderSet,
)

// Options wireservice
type Options struct {
	// 没有依赖任何服务，这里就不存在client
	// UuidGrpc grpc.UuidInterface
	// ExampleMysql mysql.ExampleInterface
	Redis redisCli.RedisInterface
}

type Uuid struct {
	// snowflake Generated by default, nodeId cannot exceed 1023, and 0 ID is not used.
	// The uuid generator corresponding to the global node
	snowflakeRw  *sync.RWMutex
	snowflakeMap *snowflake.Node
	nodeId       int64
	enableRedis  bool
	Options
}

// NewUuidService 创建uuid服务
func NewUuidService(options Options) *Uuid {
	uuidServer := StdConfig(ModName).MustBuild()
	uuidServer.Options = options

	// get node id through redis
	if uuidServer.enableRedis {
		nodeId, err := options.Redis.GetNodeId()
		if err != nil {
			panic(fmt.Errorf("get redis node id is %v", err))
		}
		uuidServer.nodeId = nodeId
	}

	// Create a new Node with a Node number of nodeId
	node, err := snowflake.NewNode(uuidServer.nodeId)
	if err != nil {
		panic(fmt.Errorf("snowflake NewNode err:%v", err))
	}

	uuidServer.snowflakeMap = node

	return uuidServer
}

func (u *Uuid) GetUuidBySnowflake(ctx context.Context, req *uuidv1.GetUuidBySnowflakeRequest) (*uuidv1.GetUuidBySnowflakeResponse, error) {
	u.snowflakeRw.RLock()
	// Generate a snowflake ID.
	id := u.snowflakeMap.Generate()
	u.snowflakeRw.RUnlock()

	return &uuidv1.GetUuidBySnowflakeResponse{
		Error: 0,
		Msg:   "success",
		Data: &uuidv1.GetUuidBySnowflakeResponse_Data{
			Uuid: id.String(),
		},
	}, nil
}

func (u *Uuid) GetUuidByGoogleUUIDV4(ctx context.Context, req *uuidv1.GetUuidByGoogleUUIDV4Request) (*uuidv1.GetUuidByGoogleUUIDV4Response, error) {
	return &uuidv1.GetUuidByGoogleUUIDV4Response{
		Error: 0,
		Msg:   "success",
		Data: &uuidv1.GetUuidByGoogleUUIDV4Response_Data{
			Uuid: uuid.New().String(),
		},
	}, nil
}
